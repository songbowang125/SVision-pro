#!/usr/bin/env python3

import os
import logging
import datetime
import multiprocessing
import multiprocessing.pool
import numpy as np

from src.version import __version__
import traceback
import shutil
from src.output_vcf import output_vcf_final
from src.collect_op import collect_and_detect_in_interval
from src.inheritype_op import inheritype_variants_in_interval
import sys
from time import strftime, localtime
import argparse


def parse_arguments(arguments=sys.argv[1:]):
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description="""SVision-Pro {0} \n \nShort Usage: SVision [parameters] -o <output path> -t <target bam path> (-b <base bam path>) -g <reference> -m <model path>""".format(__version__))

    inout_params = parser.add_argument_group("Input/Output parameters")
    inout_params.add_argument('--out_path', dest="out_path", type=os.path.abspath, required=True, help='Absolute path to output')
    inout_params.add_argument('--target_path', dest='target_path', type=os.path.abspath, required=True, help='Absolute path to target (tumor) bam file')
    inout_params.add_argument('--base_path', dest='base_path', metavar="IN", nargs="+", type=str, default=[], help='Absolute path to base (normal) bam files, not required')
    inout_params.add_argument('--access_path', dest='access_path', type=os.path.abspath, default=None, help='Absolute path to access file, not required')
    inout_params.add_argument('--model_path', dest="model_path", type=os.path.abspath, required=True, help='Absolute path to Unet predict model')
    inout_params.add_argument('--genome_path', dest='genome_path', type=os.path.abspath, required=True, help='Absolute path to your reference genome (.fai required in the directory)')
    inout_params.add_argument('--sample_name', dest='sample_name', type=str, required=True, help='Name of the BAM sample name')

    optional_params = parser.add_argument_group("Optional parameters")
    optional_params.add_argument('--preset', dest='preset', choices=['hifi', 'error-prone', 'asm'], default='hifi', required=False, help='Choose from hifi, error-prone and asm')
    optional_params.add_argument('--detect_mode', dest='detect_mode', choices=['germline', 'denovo', 'somatic', "genotype"], default='germline', required=False, help='Choose from germline, denovo and somatic')
    optional_params.add_argument('--bkp_mode', dest='bkp_mode', choices=['affected', 'extended'], default='affected', required=False, help='Choose from affected and extended')
    optional_params.add_argument('--process_num', dest="process_num", type=int, default=1, help='Thread numbers (default: %(default)s)')
    optional_params.add_argument('--min_supp', dest="min_supp", type=int, default=5, help='Minimum support read number required for SV calling (default: %(default)s)')
    optional_params.add_argument("--min_mapq", type=int, default=20, help='Minimum mapping quality of reads to consider (default: %(default)s)')
    optional_params.add_argument("--min_sv_size", type=int, default=50, help='Minimum SV size to detect (default: %(default)s)')
    optional_params.add_argument("--max_sv_size", type=int, default=50000, help='Maximum SV size to detect (default: %(default)s)')
    optional_params.add_argument("--max_coverage", type=int, default=500, help='Maximum read coverage to detect (default: %(default)s)')
    optional_params.add_argument("--interval_size", type=int, default=10000000, help='The sliding interval/window size in segment collection (default: %(default)s)')
    optional_params.add_argument("--region", type=str, default=None, help='Specific region (chromosome:start-end) to detect')
    optional_params.add_argument('--force_cluster', action="store_true", default=False, help='Force cluster uncovered events')
    optional_params.add_argument('--skip_coverage_filter', action="store_true", default=False, help='SKip filtering reads by max read coverage threshold')
    optional_params.add_argument('--skip_mismatch_filter', action="store_true", default=False, help='SKip filtering reads by mismatch ratio')

    it_params = parser.add_argument_group("Lite-Unet parameters")
    it_params.add_argument('--img_size', dest="img_size", choices=[256, 512, 1024], default=256, type=int, help='Image size for generating plots')
    it_params.add_argument('--batch_size', dest="batch_size", default=1, help='Batch size for Unet predicting')

    it_params.add_argument("--report_new_bkps", action="store_true", default=False, help='Report new breakpoints when inherityping')
    it_params.add_argument("--device", choices=['cpu', 'gpu'], default="cpu", help='Utilizing CPU or GPU to run Unet genotype module')
    it_params.add_argument("--gpu_id", type=str, default="0", help='Specific GPU ID when activating GPU device')
    it_params.add_argument("--unet_cpu_num", type=int, default=2, help='When using CPU, specific the process number for each Unet task')

    return parser.parse_args(arguments)


def check_arguments(options):
    """
    check auguments and assign defaults
    """

    if not os.path.exists(options.out_path):
        os.mkdir(options.out_path)
    sample_out_path = os.path.join(options.out_path, "tmp_{}_{}".format(options.sample_name, start_time_str))
    if not os.path.exists(sample_out_path):
        os.mkdir(sample_out_path)

    # options.set_sample_path(sample_out_path)
    options.sample_out_path = sample_out_path
    options.coverage_method = "coverage_list"

    if len(options.base_path) == 0:
        options.skip_inheritype = True
    else:
        options.skip_inheritype = False

    if options.preset == "asm":
        options.mismatch_filter = False
        options.mismatch_ratio = 1
        options.size_sim_ratio = 0.6
    elif options.preset == "error-prone":
        options.mismatch_filter = False
        options.mismatch_ratio = 0.15
        options.size_sim_ratio = 0.7
    else:
        options.mismatch_filter = True
        options.mismatch_ratio = 0.04
        options.size_sim_ratio = 0.8

    # # set min detectable frequency
    if options.detect_mode == "germline":
        options.min_diff_freq = 0.3

    elif options.detect_mode == "denovo":
        options.min_diff_freq = 0.3
    elif options.detect_mode == "somatic":
        if options.img_size == 256:
            options.min_diff_freq = 0.04

        elif options.img_size == 512:
            options.min_diff_freq = 0.02

        elif options.img_size == 1024:
            options.min_diff_freq = 0.01

        else:
            options.min_diff_freq = 0.04

    elif options.detect_mode == "genotype":
        options.min_diff_freq = 0.3

        if options.region is None:
            logging.error("[Parameter Error] no region was set when using genotype mode. Please specific --region")
    else:
        options.min_diff_freq = 0.3


    options.dist_diff_length = 1000
    options.dist_merge_continuous = 1000

    options.skip_bnd = True
    options.skip_flanking_indels = True

    if options.skip_mismatch_filter:
        options.mismatch_filter = False


class NoDaemonProcess(multiprocessing.Process):
    # make 'daemon' attribute always return False
    def _get_daemon(self):
        return False
    def _set_daemon(self, value):
        pass
    daemon = property(_get_daemon, _set_daemon)


# We sub-class multiprocessing.pool.Pool instead of multiprocessing.Pool
# because the latter is only a wrapper function, not a proper class.
class NoDaemonPool(multiprocessing.pool.Pool):
    Process = NoDaemonProcess


if __name__ == '__main__':

    start_time = datetime.datetime.now()
    start_time_str = strftime("%y%m%d_%H%M%S", localtime())

    # # STET: load params and create dirs
    # options = Options()
    options = parse_arguments()

    check_arguments(options)

    # # STEP: config logging
    log_format = logging.Formatter("%(asctime)s [%(levelname)s]    %(message)s")
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)

    fileHandler = logging.FileHandler(os.path.join(options.out_path, "{}.svision_pro_v{}.s{}.log".format(options.sample_name, __version__, options.min_supp)), mode="w")
    fileHandler.setFormatter(log_format)
    consoleHandler = logging.StreamHandler()
    consoleHandler.setFormatter(log_format)

    root_logger.addHandler(consoleHandler)
    root_logger.addHandler(fileHandler)

    logging.info("****************** Start SVision-pro, version {0} ********************".format(__version__))
    logging.info("Command: {}".format(" ".join(sys.argv)))

    logging.info("****************** Step1 collecting and plotting **********************")

    # # STEP: collect accessible chroms
    chrom_length_dict = {}
    chrom_intervals = []
    chrom_lengths = []

    # # for genotyping, we only need to detect the specific region
    if options.detect_mode == "genotype":
        try:
            interval_chrom = options.region.split(":")[0]
            interval_start = int(options.region.split(":")[1].split("-")[0]) - 2000
            interval_end = int(options.region.split(":")[1].split("-")[1]) + 2000

            options.accessible_chroms = [interval_chrom]

            chrom_intervals.append([interval_chrom, interval_start, interval_end])

        except:
            logging.error("[Parameter Error] Please check the --region parameter (format: chromosome:start-end)")
            exit(-1)

    # # for regular detection, we  need to detect the all chromosome regions
    else:
        # # if access_path is provided, load it
        if options.access_path is not None:
            with open(options.access_path) as fin:
                for line in fin:
                    line_split = line.strip().split("\t")
                    interval_chrom, interval_start, interval_end = line_split[0], int(line_split[1]), int(line_split[2])

                    if interval_chrom not in chrom_length_dict:
                        chrom_length_dict[interval_chrom] = interval_end

                    if interval_end > chrom_length_dict[interval_chrom]:
                        chrom_length_dict[interval_chrom] = interval_end

                    chrom_intervals.append([interval_chrom, interval_start, interval_end])

        # # if not provided, calculate it from reference genome
        else:
            import pysam
            ref_file = pysam.FastaFile(options.genome_path)

            for chrom in ref_file.references:
                chrom_length = ref_file.get_reference_length(chrom)

                chrom_length_dict[chrom] = chrom_length

                interval_num = int(chrom_length / options.interval_size) + 1

                for interval_index in range(interval_num):
                    chrom_intervals.append([chrom, interval_index * options.interval_size, (interval_index + 1) * options.interval_size])

        options.accessible_chroms = list(chrom_length_dict.keys())

        for chrom in chrom_length_dict:
            chrom_lengths.append([chrom, 0, chrom_length_dict[chrom]])

        if options.preset == "asm":
            chrom_intervals = chrom_lengths

    # # STEP: collect in each interval
    process_pool = multiprocessing.Pool(options.process_num)
    process_pool_res = []

    for interval_chrom, interval_start, interval_end in chrom_intervals:
        process_pool_res.append(process_pool.apply_async(collect_and_detect_in_interval, (interval_chrom, interval_start, interval_end, options)))

    process_pool.close()
    process_pool.join()

    # STEP: deal with errors from process pool
    errored_intervals = []
    for res in process_pool_res:
        res = res.get()
        if len(res[0]) != 0:
            logging.error("[Collecting Error] {} {}. {}".format(options.sample_name, res[0][0], res[0][1]))
            errored_intervals.append(res[0][0])

    if len(errored_intervals) > 0:
        logging.error("[Collecting Failed] {}. Plesse check the error messages above".format(options.sample_name,))
        exit(-1)

    # # STEP: do genotyping
    logging.info("****************** Step2 lite-Unet predicting **************************")

    if options.device == "cpu":
        # process_pool = multiprocessing.Pool(max(1, int(options.process_num / options.unet_cpu_num)))
        process_pool = NoDaemonPool(max(1, int(options.process_num / options.unet_cpu_num)))

    else:
        # process_pool = multiprocessing.Pool(1)
        process_pool = NoDaemonPool(1)

    process_pool_res = []

    for interval_chrom, interval_start, interval_end in chrom_intervals:
        process_pool_res.append(process_pool.apply_async(inheritype_variants_in_interval, (interval_chrom, interval_start, interval_end, options)))

    process_pool.close()
    process_pool.join()

    # # process errors
    if not options.skip_inheritype:
        for res in process_pool_res:
            res = res.get()

            if len(res[0]) != 0:
                logging.error("[Inherityping Error] {} {}. {}".format(options.sample_name, res[0][0], res[0][1]))

    # # STEP: merge split vcfs to final vcf file
    logging.info("****************** Step3 Outputting to VCF ****************************")

    output_vcf_path = os.path.join(options.out_path, "{}.svision_pro_v{}.s{}.vcf".format(options.sample_name, __version__, options.min_supp))
    output_cnt, sv_cnt, csv_cnt = output_vcf_final(output_vcf_path, chrom_intervals, options)

    # STEP: rm the tmp file
    shutil.rmtree(options.sample_out_path)

    # # STEP: output stat information
    end_time = datetime.datetime.now()

    logging.info("****************** Step4 Finish ***********************************")
    logging.info("SVision-pro v{} successfully finished, costing {}s".format(__version__, (end_time - start_time).total_seconds()))
